import{highlight_default as t}from"./highlight-6hwN.js";import"./nijor-ldu.js";import{component_default as e}from"./component-Djs.js";import{highlight_default$1 as n,section_default as r}from"./highlight-eRn.js";var o=new e(async function(){return'<section_vtr44f title="Fetching data from server"> We can fetch data from the server using the following syntax. <pre n-scope="vtr44f"><code lang="html" n-scope="vtr44f">\n            &lt;body&gt;\n                &lt;div n:fetch="result:func()"&gt; &lt;!--\'result\' is the variable that is retured from the async function \'func\'---&gt;\n                    &lt;n:data&gt;\n                        &lt;!--This section gets rendered when \'result\' is fetched---&gt;\n                        &lt;!--You can use the \'result\' variable here---&gt;\n                    &lt;n:data&gt;\n                    &lt;n:loading&gt;\n                        &lt;!--This section gets rendered when \'result\' is being fetched ---&gt;\n                    &lt;n:loading&gt;\n                    &lt;n:error catch="err"&gt;\n                        &lt;!--This section gets rendered if there is an error while fetching \'result\' ---&gt;\n                        &lt;!--You can catch the error in the variable specified in the optional \'catch\' attribute ---&gt;\n                    &lt;n:error&gt;\n                &lt;div&gt;\n            &lt;/body&gt;\n            &lt;script&gt;\n                async function func(){\n                    const result = await fetch(\'.....\');\n                    // Some more code here ....\n                }\n            &lt;/script&gt;\n        </code></pre> You can only use the n:fetch attribute on a div, not on any other html element. <br n-scope="vtr44f"> Let\'s understand it using an example : <pre n-scope="vtr44f"><code lang="html" n-scope="vtr44f">\n            &lt;loading_spinner n:imported="....."/&gt;\n            &lt;body&gt;\n                &lt;div n:fetch="planet:getPlanet()"&gt;\n                    &lt;n:data&gt;\n                        &lt;h1&gt;Welcome from {planet} !&lt;/h1&gt;\n                    &lt;n:data&gt;\n                    &lt;n:loading&gt;\n                        &lt;loading_spinner&gt;&lt;/loading_spinner&gt;\n                        &lt;p&gt;Please wait while Planet is being loaded ...&lt;/p&gt;\n                    &lt;n:loading&gt;\n                    &lt;n:error catch="err"&gt;\n                        &lt;p&gt;An unexpected error occured : {err}&lt;/p&gt;\n                    &lt;n:error&gt;\n                &lt;div&gt;\n            &lt;/body&gt;\n            &lt;script&gt;\n                async function func(){\n                    const id = Math.floor(Math.random() * 60) + 1;\n                    const response = await fetch(`https://swapi.tech/tech/planets/${id}`);\n                    const data = await response.json();\n                    return data.name;\n                }\n            &lt;/script&gt;\n        </code></pre> </section_vtr44f><section_vtr44f title="Looping over data fetched from server"> If our fetched data is an array of objects, we have to loop over each item, but since we can\'t use the <highlight_vtr44f>n:for</highlight_vtr44f> loops inside <highlight_vtr44f>n:data</highlight_vtr44f> , we have a special syntax for it. <br n-scope="vtr44f"> Let\'s understand with the help of an example : Suppose we are building a housing portal and we\'ve to display all the houses which are available for rent in Silicon Valley. <pre n-scope="vtr44f"><code lang="html" n-scope="vtr44f">\n            &lt;house_card n:imported="...."/&gt;\n            &lt;body&gt;\n                &lt;div n:fetch="house:getHouses(city)"&gt;\n                    &lt;n:data loop&gt; &lt;!--Everything inside n:data will be looped for all entries--&gt;\n                        &lt;house_card address="{house.address}" rent="{house.rent}"&gt;&lt;/house_card&gt;\n                    &lt;/n:data&gt;\n                    &lt;n:loading&gt;Loading Houses ...&lt;/n:loading&gt;\n                    &lt;n:error&gt;An error occured while loading houses.&lt;/n:error&gt;\n                &lt;/div&gt;\n            &lt;/body&gt;\n            &lt;script&gt;\n                async function getHouses(){\n                    // ... API Calls\n                    return data; // An array of object\n                }\n            &lt;/script&gt;\n        </code></pre> We have another way of writing loops inside n:data which is useful in certain conditions. <br n-scope="vtr44f"> Example : <pre n-scope="vtr44f"><code lang="html" n-scope="vtr44f">\n            &lt;n:data loop&gt;\n                &lt;h1&gt;Houses are :&lt;/h1&gt; &lt;!-- This content will get rendered as many times as the number of times &lt;house_cards&gt; gets rendered--&gt;\n                &lt;house_card address="{house.address}" rent="{house.rent}"&gt;&lt;/house_card&gt;\n            &lt;/n:data&gt;\n        </code></pre> &lt;h1&gt;Houses are :&lt;/h1&gt; will get rendered as many times as the number of times &lt;house_cards&gt; gets rendered. <br n-scope="vtr44f"> In order to prevent it, we have to modify our code in this way. <pre n-scope="vtr44f"><code lang="html" n-scope="vtr44f">\n            &lt;n:data loop&gt;\n                &lt;h1&gt;Houses are :&lt;/h1&gt; &lt;!-- This content will get rendered only once --&gt;\n                &lt;n:loop&gt; &lt;!-- Everything writen inside will be looped --&gt;\n                    &lt;house_card address="{house.address}" rent="{house.rent}"&gt;&lt;/house_card&gt;\n                &lt;/n:loop&gt;\n            &lt;/n:data&gt;\n        </code></pre> </section_vtr44f>'},async function(){n.init("highlight_vtr44f"),await n.run(),r.init("section_vtr44f"),await r.run(),t.highlightAll()});export{o as default};