import{highlight_default as e}from"./highlight-6hwN.js";import"./nijor-ldu.js";import{component_default as t}from"./component-Djs.js";import{highlight_default$1 as i,section_default as o}from"./highlight-eRn.js";var n=new t(async function(){return'<section_btfy0 title="Routing"> Nijor provides a client-side routing capability that allows the rendering of different user interfaces based on specific routes. Unlike traditional approaches, Nijor\'s routing mechanism renders routes within the same page, eliminating the need for page refreshes and delivering a seamless user experience. </section_btfy0><section_btfy0 title="File-Based Routing"> Nijor simplifies the process of rendering pages for different routes by utilizing file-based routing. This means that developers are relieved from the responsibility of manually coding the rendering logic for each route. Instead, Nijor\'s compiler automatically handles this based on the organization of files in the <highlight_btfy0>src/pages</highlight_btfy0> directory of your Nijor project. <br n-scope="btfy0"><br n-scope="btfy0"> To illustrate this behavior, let\'s consider an example. When a user visits the \'/\' route of our website, the page rendered will be src/pages/index.nijor. Similarly, accessing the \'/about\' route will trigger the rendering of src/pages/about.nijor. In the event that a route doesn\'t exist, Nijor will render src/pages/404.nijor. This convenient approach streamlines the development process and improves overall efficiency. </section_btfy0><section_btfy0 title="Understanding the App.nijor file"> The <highlight_btfy0>App.nijor</highlight_btfy0> is the root component that gets rendered before anything else ; all the other components and pages get rendered inside it. Without this page, the Nijor router simply won\'t work. You can render those components in this page which remain same in all the pages, thus preventing the need for rerendering the common components during navigation through different routes. <br n-scope="btfy0"> The App.nijor file must have the <highlight_btfy0>&lt;div n:slot&gt;&lt;/div&gt;</highlight_btfy0> in the <highlight_btfy0>App.nijor</highlight_btfy0> file. The content from the routes (pages from the src/page/ dir) will be rendered inside this special tag. <pre n-scope="btfy0"><code lang="html" n-scope="btfy0">\n        &lt;body&gt;\n            &lt;div n:slot&gt;\n                &lt;!--All the pages from the src/pages directory are rendered inside this div (marked with the n:slot attribute). \n                    Anything outside this div is always rendered irrespective of route.\n                    You can write code for common header or footer outside this div so that it renders in every page, #Reasuablity\n                --&gt;\n            &lt;/div&gt;\n\n            &lt;!-- Note : Do not add an \'id\' attribute to the div with the n:slot attribute. For styling, use \'class\' instead. --&gt;\n        &lt;/body&gt;\n        </code></pre> </section_btfy0><section_btfy0 title="Boilerplate Code for Routing"> In order to use the Nijor Router in your project, your <highlight_btfy0>src/App.js</highlight_btfy0> file must contain the following Boilerplate code : <pre n-scope="btfy0"><code lang="js" n-scope="btfy0">\n        import { Render } from \'nijor\';\n        import \'nijor/router\';\n        import App from \'App.nijor\';\n\n        //@Routes()\n        \n        (async ()=&gt; await Render(App))();\n        </code></pre> Note: The <highlight_btfy0>//@Routes()</highlight_btfy0> comment is crucial for the Nijor router to function properly. Please ensure that there is no code or comments written on the same line as this comment. <br n-scope="btfy0"></section_btfy0><section_btfy0 title="Routing"> In order to navigate between routes we use the <highlight_btfy0>n:route</highlight_btfy0> attribute on the anchor tag only. If we use the <highlight_btfy0>href</highlight_btfy0> attribute instead of <highlight_btfy0>n:route</highlight_btfy0>, we\'ll still be able to navigate. But the page will reload and the navigation won\'t be that smooth. Use <highlight_btfy0>href</highlight_btfy0> attribute for linking to external website. <pre n-scope="btfy0"><code n-scope="btfy0">\n        &lt;a n:route="/"&gt;Index Page&lt;/a&gt; &lt;!--Routing will be smooth, the page won\'t refresh--&gt;\n        &lt;a href="/"&gt;Index Page&lt;/a&gt; &lt;!--Routing won\'t be smooth, the page will refresh--&gt;\n        </code></pre> </section_btfy0><section_btfy0 title="Sub Routes within a route"> By sub routes, we mean routing within a parent route. <br n-scope="btfy0"> For instance, there is a route say, <highlight_btfy0>/dashboard</highlight_btfy0> which has some sub-routes like <highlight_btfy0>/dashboard/profile</highlight_btfy0>, <highlight_btfy0>/dashboard/settings</highlight_btfy0>, etc and each of these pages have a lot of common components and common layout in general. So, you don\'t want to copy-paste the same common code for these pages. In these scenarios, sub-routes can be very useful. <br n-scope="btfy0"><br n-scope="btfy0"> In order to create a sub route within a route : <br n-scope="btfy0"> (1) Create a folder, say \'dashboard\' inside the src/pages directory. <br n-scope="btfy0"> (2) Create the <highlight_btfy0>_.nijor</highlight_btfy0> file within it. (optional)<br n-scope="btfy0"> (3) Create <highlight_btfy0>index.nijor</highlight_btfy0> file within the folder.<br n-scope="btfy0"> (4) Create <highlight_btfy0>profile.nijor</highlight_btfy0> file within the folder.<br n-scope="btfy0"><br n-scope="btfy0"> Now, write all the common components in the <highlight_btfy0>_.nijor</highlight_btfy0> file. This file contains all the common code/components for the \'/dashboard\' route. Whenever somebody visits \'/dashboard/*\', this page will get rendered. If you don\'t have the _.nijor file, the routes will be directly rendered inside the div[n:slot] in the <highlight_btfy0>App.nijor</highlight_btfy0>. <pre n-scope="btfy0"><code n-scope="btfy0">\n        &lt;!-- src/pages/dashboard/_.nijor --&gt;\n        &lt;sidenav n:imported="components/sidenav"/&gt;\n        &lt;body&gt;\n            &lt;sidenav&gt;&lt;/sidenav&gt;\n            &lt;div n:slot&gt;\n                &lt;!--All the subroutes will be rendered inside this folder.\n                Anything outside it will be rendered for any sub-route within \'/dashboard\' route--&gt;\n            &lt;/div&gt;\n        &lt;/body&gt;\n        </code></pre> <pre n-scope="btfy0"><code n-scope="btfy0">\n        &lt;!-- src/pages/dashboard/index.nijor --&gt;\n        &lt;!-- page will be rendered when route is /dasboard --&gt;\n        &lt;body&gt;\n            &lt;div&gt;\n                &lt;h1&gt;Welcome to Dasboard Page&lt;/h1&gt;\n            &lt;/div&gt;\n        &lt;/body&gt;\n        </code></pre> <pre n-scope="btfy0"><code n-scope="btfy0">\n        &lt;!-- src/pages/dashboard/profile.nijor --&gt;\n        &lt;!-- page will be rendered when route is /dasboard/profile --&gt;\n        &lt;body&gt;\n            &lt;div&gt;\n                &lt;h1&gt;Welcome to Profile Page&lt;/h1&gt;\n            &lt;/div&gt;\n        &lt;/body&gt;\n        </code></pre> You can have more than one level of sub-routing, but can\'t use _.nijor file then. It means that you can have a file like pages/dashboard/_.nijor but not pages/dashboard/me/_.nijor . </section_btfy0><section_btfy0 title="Parameterized Routing"> Nijor supports parameterized routes, allowing for variable paths within routes. To define a parameterized route, enclose the parameter(s) using square brackets while naming your file ( e.g [parameter-name].nijor ). You can add any desired text before or after the parameter name. For example: @[user].nijor, [item].nijor, id-[x].nijor, etc. <br n-scope="btfy0"><br n-scope="btfy0"> Let\'s explore parameterized routes with an example: <br n-scope="btfy0"> Suppose we are building a profile page for users on our site, and we want to render the profile of \'rudra\' when accessing the \'/@rudra\' route. Similarly, we want to display the profile of \'parvati\' for the \'/@parvati\' route, and so on. We\'ll create a single file <highlight_btfy0>pages/@[user]/index.nijor</highlight_btfy0> <pre n-scope="btfy0"><code n-scope="btfy0">\n        &lt;body params="{user}"&gt; &lt;!-- You can use \'props\' instead of \'params\' but \'params\' is recommended --&gt;\n            &lt;div&gt;\n                &lt;h1&gt;Hi {user}&lt;/h1&gt; \n                &lt;!-- \n                    If the user visits /@rudra &lt;h1&gt;Hi {user}&lt;/h1&gt; will become &lt;h1&gt;Hi rudra&lt;/h1&gt; \n                    If the user visits /@parvati &lt;h1&gt;Hi {user}&lt;/h1&gt; will become &lt;h1&gt;Hi parvati&lt;/h1&gt; \n                --&gt;\n            &lt;/div&gt;\n        &lt;/body&gt;\n        </code></pre> You can have routes like /@[user]/dashboard , /@[user]/media,/@[user]/p-[id] , etc. </section_btfy0>'},async function(){i.init("highlight_btfy0"),await i.run(),o.init("section_btfy0"),await o.run(),e.highlightAll()});export{n as default};