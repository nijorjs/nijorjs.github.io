import"./nijor-B9DPF4_N.js";import{highlight_default as e,section_default as t}from"./highlight-BJ8CyrBX.js";var i=new window.nijor.component((async function(){return'<section_pqhui title="Themes" n-scope="pqhui"> Dark-Mode is very popular these days. You can implement dark mode using <highlight_pqhui n-scope="pqhui">CSS media queries</highlight_pqhui>. But, it has a little problem : dark mode will only get activated if your browser theme is set to dark. <br n-scope="pqhui"> So, what if you want to use dark-mode without your browser\'s dark-mode activated ? or What if you want the user to have the freedom to toggle between dark, light and automatic(based on browser\'s theme) modes without them changing the theme of the browser ? <br n-scope="pqhui"> You need to use Javascript for these use cases, and Nijor has got it covered ! <br n-scope="pqhui"> Actually, with Nijor, you can not only implement dark mode, but also other themes. Example : Twitter (now X) has 3 color schemes : light, dark, dim. </section_pqhui><section_pqhui title="theme attribute" n-scope="pqhui"> In Nijor, we use the theme attribute on style tags to specify the compiler which styles to apply on which theme. The css code inside the style tag with no theme attribute is common code for all the themes and is generally used as the light theme. <pre n-scope="pqhui"><code lang="html" n-scope="pqhui">\n        &lt;body&gt;\n            &lt;div&gt;\n                &lt;h1&gt;Nomoskar&lt;/h1&gt;\n            &lt;/div&gt;\n        &lt;/body&gt;\n        &lt;style&gt; \n            /* This style will be rendered irrespective of theme unless you tweak a few properties in other style tag*/\n            div{\n                margin: 10px;\n                padding: 10px;\n                background-color: white;\n            }\n            h1{\n                color: black;\n            }\n        &lt;/style&gt;\n        &lt;style theme="dark"&gt; \n        /* This style will be rendered when the theme is set to \'dark\' */\n            div{\n                background-color: black;\n            }\n            h1{\n                color: white;\n            }\n        &lt;/style&gt;\n        &lt;style theme="dim"&gt; \n        /* This style will be rendered when the theme is set to \'dim\' */\n            div{\n                background-color: rgb(52, 74, 87);\n            }\n            h1{\n                color: white;\n            }\n        &lt;/style&gt;\n        </code></pre> </section_pqhui><section_pqhui title="nijor/theme" n-scope="pqhui"> The "nijor/theme" module imports 2 functions : <pre n-scope="pqhui"><code n-scope="pqhui">\n        import { autoTheme } from \'nijor/theme\';\n        autoTheme(); // Use this in the App.nijor file \n        /* autoTheme() automatically handles dark mode for the website.\n        If the browser\'s mode is dark mode, it applies the styles specified in &lt;style theme="dark"&gt;*/\n        </code></pre> <pre n-scope="pqhui"><code n-scope="pqhui">\n        import { setTheme } from \'nijor/theme\';\n\n        setTheme(\'dark\'); // Applies the styles specified in &lt;style theme="dark"&gt;\n        setTheme(\'light\'); // Applies the styles specified in &lt;style theme="light"&gt;\n        setTheme(\'cherry\'); // Applies the styles specified in &lt;style theme="cherry"&gt;\n        \n        /* Once you manually set a theme, the autoTheme() function stops working */\n        setTheme(\'auto\'); // Resets the theme ; autoTheme() works again as expected\n\n        /* In order to get the current theme */\n        const theme = window.localStorage.getItem(\'theme\'); // Returns \'auto\' if theme hasn\'t been set yet.\n        </code></pre> </section_pqhui>'}),(async function(){t.init("section_pqhui"),await t.run(),t.init("section_pqhui"),await t.run(),e.init("highlight_pqhui"),await e.run(),t.init("section_pqhui"),await t.run(),hljs.highlightAll()}));export{i as default};