import{highlight_default as t}from"./highlight-UIb.js";import"./nijor-V5q.js";import{component_default as e}from"./component-XPa6N.js";import{highlight_default$1 as n,section_default as i}from"./highlight-k8I.js";var o=new e(async function(){return'<section_4b3p title="Reactivity"> Reactive variables in Nijor provide a powerful way to manupulate the DOM with less code ! <br n-scope="4b3p"><highlight_4b3p>Note : Reactivity is still in development phase. Hence, thus feature might be a little buggy in 1% of the cases.</highlight_4b3p></section_4b3p><section_4b3p title="Update UI"> Reactive variables update the UI. <br n-scope="4b3p"> Let\'s learn using a simple example. <pre n-scope="4b3p"><code n-scope="4b3p">\n            &lt;body&gt;\n                &lt;h1&gt;Counter&lt;/h1&gt;\n                &lt;p&gt;Count is {@count}&lt;/p&gt; &lt;!-- This tag gets re-rendered whenever the value of @count changes --&gt;\n                &lt;p&gt;Double is {@double}&lt;/p&gt; &lt;!-- This tag gets re-rendered whenever the value of @double changes --&gt;\n                &lt;div&gt;\n                    &lt;button on:click="Decrement()"&gt;-&lt;/button&gt;\n                    &lt;button on:click="ResetCount()"&gt;Reset&lt;/button&gt;\n                    &lt;button on:click="Increment()"&gt;+&lt;/button&gt;\n                &lt;/div&gt;\n            &lt;/body&gt;\n\n            &lt;script&gt;\n                // Variables of type @varname are reactive variables. Reactive variables can only be declared inside a .nijor file, not inside a .js file\n                \n                const @count = 0; // Reactive variables are declared using the const keyword, but their value can be changed.\n                const @double = @count * 2; // It\'s a derived reactive variable ; it\'s value changes whenever the value of @count changes.\n                \n                function Increment() {\n                    @count++;\n                }\n                function Decrement() {\n                    @count--;\n                }\n\n                function ResetCount() {\n                    @count = 0;\n                }\n            &lt;/script&gt;\n        </code></pre> </section_4b3p><section_4b3p title="Gathering input data"><highlight_4b3p>n:ref</highlight_4b3p> attribute is used for one-way data-bindings of a reactive variable to an input field. Whenever the value of the input field changes, the value of the reactive variable changes, but not the other way round. <pre n-scope="4b3p"><code n-scope="4b3p">\n            &lt;body&gt;\n                &lt;input n:ref="@name" type="text" placeholder="Type your name ..."/&gt; &lt;!-- Whenever the value of this input changes, @name will change --&gt;\n                &lt;p&gt;Hello {@name}&lt;/p&gt; &lt;!-- As you type in the input box, the text inside this tag will get updated in real time --&gt;\n            &lt;/body&gt;\n            &lt;script&gt;\n                const @name = \'\';\n            &lt;/script&gt;\n        </code></pre> <highlight_4b3p>n:ref</highlight_4b3p> is useful for gathering data from inputs for form submitions. <pre n-scope="4b3p"><code n-scope="4b3p">\n            &lt;body&gt;\n                &lt;input n:ref="@name" type="text" placeholder="Type your name ..."/&gt;\n                &lt;input n:ref="@age" type="number" placeholder="Type your age ..."/&gt;\n                &lt;button on:click="sendData()"&gt;Submit&lt;/button&gt;\n            &lt;/body&gt;\n            &lt;script&gt;\n                const @name = \'\';\n                const @age = 0;\n\n                function sendData(){\n                    let data = {name: @name, age: @age};\n                    // fetch(....);\n                }\n            &lt;/script&gt;\n    </code></pre></section_4b3p><code n-scope="4b3p">\n\n    <section_4b3p title="Subscribe to events">\n        You can subscribe to reactive variables. Whenever a reactive variable changes it\'s value, the specified function will run.\n        <pre n-scope="4b3p"><code n-scope="4b3p">\n            const @msg = \'Hello\';\n            @msg.subscribe(value=&gt;console.log(value)); // Whenever @msg changes, the new value of @msg will be printed to the console.\n            @msg = \'Hi\'; // \'Hi\' gets printed to the console.\n        </code></pre></section_4b3p><section_4b3p title="Importing/Exporting Reactive Variables"> You can import reactive variables from other components to change the UI in that other component. <br n-scope="4b3p"><br n-scope="4b3p"><p n-scope="4b3p">File : src/components/msgbar.nijor</p> <pre n-scope="4b3p"><code n-scope="4b3p">\n            &lt;body&gt;\n                &lt;div&gt;\n                    &lt;p&gt;Msg is : {@msg}&lt;/p&gt;\n                &lt;/div&gt;\n            &lt;/body&gt;\n            &lt;script&gt;\n                const @msg = \'Hello\';\n                export { @msg };\n            &lt;/script&gt;\n        </code></pre> <p n-scope="4b3p">File : src/pages/input.nijor</p> <pre n-scope="4b3p"><code n-scope="4b3p">\n            &lt;body&gt;\n                &lt;div&gt;\n                    &lt;input type="text" n:ref="@msg"/&gt;\n                &lt;/div&gt;\n            &lt;/body&gt;\n            &lt;script&gt;\n                import { @msg } from \'components/msgbar.nijor\';\n            &lt;/script&gt;\n        </code></pre> </section_4b3p></code>'},async function(){n.init("highlight_4b3p"),await n.run(),i.init("section_4b3p"),await i.run(),t.highlightAll()});export{o as default};