import{highlight_default as t}from"./highlight-xtmTb.js";import"./nijor-Tipf.js";import{component_default as e}from"./component-39lQS.js";import{highlight_default$1 as n,section_default as o}from"./highlight-r1H3X.js";var r=new e(async function(){return'<section_r8thjf title="Components"> In Nijor projects, we don\'t write code in HTML files ; we write code in <highlight_r8thjf>*.nijor</highlight_r8thjf> files instead. Each <highlight_r8thjf>*.nijor</highlight_r8thjf> file is a component in a Nijor Project. <br n-scope="r8thjf"> A Nijor Component is a capsule of HTML, CSS and Javascript code in a single file in which the HTML, CSS and JS are scoped which allows developers to name their CSS classes and Javascript functions anyway we like without worrying about messing up with the scopes of other components. <br n-scope="r8thjf"> A Nijor Component can be used as a custom HTML tag (with custom attributes) by other Nijor Component. It can also be used as a Page for routing. </section_r8thjf><section_r8thjf title="Structure of a Nijor Component"> <pre n-scope="r8thjf"><code lang="html" n-scope="r8thjf">\n        &lt;body&gt;\n            &lt;!-- Your HTML goes here --&gt;\n        &lt;/body&gt;\n        &lt;style&gt;\n            /* Your CSS goes Here */\n        &lt;/style&gt;\n        &lt;script&gt;\n            // Your JS goes here\n        &lt;/script&gt;\n        </code></pre> There are 2 types of script tag in a Nijor component. It is not neccessary to use both of them in a single component. <pre n-scope="r8thjf"><code lang="html" n-scope="r8thjf">\n        &lt;body props="{name}"&gt;\n            &lt;p&gt;Hello {name} !&lt;/p&gt;\n        &lt;/body&gt;\n        &lt;script&gt;\n            // Code will get executed before the component Renders. It\'s code is in the global scope\n            // console.log(name); // Will result in error as this code gets executed before the component even renders.\n            // Variables defined here can be read inside the body tag using {variable} syntax\n            // Used for defining functions which get executed on events like on:click, on:customevent, onclick, etc\n        &lt;/script&gt;\n        &lt;script defer&gt;\n            // Code will get executed after the component Renders.\n            console.log(name); // Won\'t result in error as this code gets executed after the component renders.\n            // Variables defined here can\'t be read inside the body tag using {variable} syntax\n        &lt;/script&gt;\n        </code></pre> </section_r8thjf><section_r8thjf title="props Attribute"><highlight_r8thjf>props</highlight_r8thjf> is a special attribute available in the <highlight_r8thjf>body</highlight_r8thjf> tag . The props attribute contains an object of all the custom attributes passed to the component from another component. <highlight_r8thjf>_text_</highlight_r8thjf> is a property in the props object which returns the <highlight_r8thjf>innerHTML </highlight_r8thjf> of the component when imported by another component. If the component is a page, we\'ve to use <highlight_r8thjf>params</highlight_r8thjf> instead of <highlight_r8thjf>props</highlight_r8thjf>. <pre n-scope="r8thjf"><code lang="html" n-scope="r8thjf">\n        &lt;body props="{attr1,attr2}"&gt;\n            Attribute1 : {attr1}&lt;br&gt;\n            Attribute2 : {attr2}&lt;br&gt;\n        &lt;/body&gt;\n        &lt;script&gt;\n            console.log(attr1,attr2);\n        &lt;/script&gt;\n        </code></pre> or <pre n-scope="r8thjf"><code lang="html" n-scope="r8thjf">\n        &lt;body props="attrs"&gt;\n            Attribute1 : {attrs.attr1}&lt;br&gt;\n            Attribute2 : {attrs.attr2}&lt;br&gt;\n        &lt;/body&gt;\n        &lt;script&gt;\n            console.log(attrs.attr1,attrs.attr2);\n        &lt;/script&gt;\n        </code></pre> </section_r8thjf><section_r8thjf title="Template string"> Inside the body tag, you can use the value of a JS variable of the same component inside any HTML tag by enclosing the name of the variable by curly brackets. <pre n-scope="r8thjf"><code lang="html" n-scope="r8thjf">\n        &lt;body&gt;\n            Hi! my name is {name}. &lt;br&gt;\n            If you just want to just enclose some text within curly brackets, use \\(escape-sequence).\n            Example :\n                \\{name} will just print {name} not Garuda\n        &lt;/body&gt;\n        &lt;script&gt;\n            let name = "Garuda";\n        &lt;/script&gt;\n        </code></pre> You might get an error if you use { } inside your body tag as Nijor thinks that the curlybraces are for variable. To avoid it, use \\{ } </section_r8thjf><section_r8thjf title="Calling events"> In Nijor, instead of calling events like <highlight_r8thjf>onclick</highlight_r8thjf>, <highlight_r8thjf>onload</highlight_r8thjf>, etc we use events like <highlight_r8thjf>on:click</highlight_r8thjf>, <highlight_r8thjf>on:load</highlight_r8thjf>, etc. <pre n-scope="r8thjf"><code lang="html" n-scope="r8thjf">\n        &lt;body&gt;\n            &lt;input type="number" id="num"&gt;\n            &lt;button on:click="calc()"&gt;Click Me !&lt;/button&gt;\n            &lt;p id="res"&gt;&lt;/p&gt;\n        &lt;/body&gt;\n        &lt;script&gt;\n            function Factorial(n){\n                if(n===1 || n===0) return 1;\n                return n * Factorial(n-1);\n            }\n            function calc(){\n                let num = document.getElementById("num").value;\n                document.getElementById("res").innerHTML = `${num}! = ${Facrorial(num)}`;\n            }\n        &lt;/script&gt;\n        </code></pre> </section_r8thjf><section_r8thjf title="Importing a component"> Let\'s assume that there is a component blogpost.nijor in the <highlight_r8thjf>components/</highlight_r8thjf> directory. We can import it any Nijor file by the following syntax. <pre n-scope="r8thjf"><code lang="html" n-scope="r8thjf">\n        &lt;blogpost n:imported="components/blogpost"/&gt;\n        &lt;body&gt;\n            &lt;blogpost title="Nijor : A first look"&gt;Nijor is a modern framework for building modern apps .....&lt;/blogpost&gt;\n        &lt;/body&gt;\n        </code></pre> </section_r8thjf><section_r8thjf title="Example :"><p n-scope="r8thjf">File : src/components/greet.nijor</p> <pre n-scope="r8thjf"><code lang="html" n-scope="r8thjf">\n        &lt;body props="{name,_text_}"&gt;\n            &lt;div&gt;\n                &lt;h1&gt;Hello {name}&lt;/h1&gt;\n                &lt;p&gt;{_text_}&lt;/p&gt;\n            &lt;/div&gt;\n        &lt;/body&gt;\n        &lt;style&gt;\n            div{\n                padding : 0.5rem;\n                background-color : white;\n            }\n            h1{\n                color : #0099ff;\n            }\n        &lt;/style&gt;\n        </code></pre> <div style="display:none;" n-scope="r8thjf"><code n-scope="r8thjf"></code></div><p n-scope="r8thjf">File : src/pages/chat.nijor</p> <pre n-scope="r8thjf"><code lang="html" n-scope="r8thjf">\n        &lt;greet n:imported="components/greet.nijor"/&gt;\n        &lt;!--&lt;greet n:imported="components/greet"/&gt; will also work as the file extension .nijor isn\'t mandatory while importing components. --&gt;\n        &lt;body&gt;\n            &lt;greet name="Vasudev"&gt;How are you bro !&lt;/greet&gt;\n            &lt;greet name="Ruda"&gt;Long time no see !&lt;/greet&gt;\n        &lt;/body&gt;\n        </code></pre> </section_r8thjf>'},async function(){n.init("highlight_r8thjf"),await n.run(),o.init("section_r8thjf"),await o.run(),t.highlightAll()});export{r as default};