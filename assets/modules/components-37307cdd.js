import{$ as t,a as e}from"./highlight-a2f415e0.js";import n from"./codeblock-3a0e8dc7.js";var o=new window.nijor.component((async function(){return'<div style="display:none;" n-scope="LrsLuV3bBnF"><codeq2o n-scope="LrsLuV3bBnF"></codeq2o></div>\n    <sectionq2o title="Components" n-scope="LrsLuV3bBnF">\n        In Nijor projects, we don\'t write code in HTML files ; we write code in <highlightq2o n-scope="LrsLuV3bBnF">*.nijor</highlightq2o> files instead. Each <highlightq2o n-scope="LrsLuV3bBnF">*.nijor</highlightq2o> file is a component in a Nijor Project. <br n-scope="LrsLuV3bBnF">\n        A Nijor Component is a capsule of HTML, CSS and Javascript code in a single file in which the HTML, CSS and JS are scoped which allows developers to name their CSS classes and Javascript functions anyway we like without worrying about messing up with the scopes of other components. <br n-scope="LrsLuV3bBnF">\n        A Nijor Component can be used as a custom HTML tag (with custom attributes) by other Nijor Component. It can also be used as a Page for routing.\n    </sectionq2o>\n    <sectionq2o title="Structure of a Nijor Component" n-scope="LrsLuV3bBnF">\n        <codeq2o n-scope="LrsLuV3bBnF">\n            &lt;template&gt;\n                &lt;!-- Your HTML goes here --&gt;\n            &lt;/template&gt;\n            &lt;style&gt;\n                /* Your CSS goes Here */\n            &lt;/style&gt;\n            &lt;script&gt;\n                // Your JS goes here\n            &lt;/script&gt;\n        </codeq2o>\n        There are 3 types of script tag in a Nijor component. It is not neccessary to use all of them in a single project.\n        <codeq2o n-scope="LrsLuV3bBnF">\n            &lt;template specs={name}&gt;\n                &lt;p&gt;Hello {name} !&lt;/p&gt;\n            &lt;/template&gt;\n            &lt;script&gt;\n                // Code will get executed before the component Renders. It\'s code is in the global scope\n                // console.log(name); // Will result in error as this code gets executed before the component even renders.\n                // Variables defined here can be read inside the template tag using {variable} syntax\n                // Used for defining functions which get executed on events like on:click, on:customevent, onclick, etc\n            &lt;/script&gt;\n            &lt;script mid&gt;\n                /* Very similar to the script tag above but with a slight difference; this script is scoped within the component itself.\n                console.log(name); // Won\'t result in error as this code gets executed after the component renders.\n                // Variables defined here can be read inside the template tag using {variable} syntax\n            &lt;/script&gt;\n            &lt;script defer&gt;\n                // Code will get executed after the component Renders.\n                console.log(name); // Won\'t result in error as this code gets executed after the component renders.\n                // Variables defined here can\'t be read inside the template tag using {variable} syntax\n            &lt;/script&gt;\n        </codeq2o>\n    </sectionq2o>\n    <sectionq2o title="Specs Attribute" n-scope="LrsLuV3bBnF">\n        <highlightq2o n-scope="LrsLuV3bBnF">specs</highlightq2o> is a special attribute available in the <highlightq2o n-scope="LrsLuV3bBnF">template</highlightq2o> tag . The specs attribute contains an object of all the custom attributes passed to the component from another component. <highlightq2o n-scope="LrsLuV3bBnF">_text_</highlightq2o> is a property in the specs object which returns the <highlightq2o n-scope="LrsLuV3bBnF">innerHTML</highlightq2o> of the component when imported by another component.\n        <codeq2o n-scope="LrsLuV3bBnF">\n            &lt;template specs={attr1,attr2}&gt;\n                Attribute1 : {attr1}&lt;br&gt;\n                Attribute2 : {attr2}&lt;br&gt;\n            &lt;/template&gt;\n            &lt;script&gt;\n                console.log(attr1,attr2);\n            &lt;/script&gt;\n        </codeq2o>\n        or\n        <codeq2o n-scope="LrsLuV3bBnF">\n            &lt;template specs=attrs&gt;\n                Attribute1 : {attrs.attr1}&lt;br&gt;\n                Attribute2 : {attrs.attr2}&lt;br&gt;\n            &lt;/template&gt;\n            &lt;script&gt;\n                console.log(attrs.attr1,attrs.attr2);\n            &lt;/script&gt;\n        </codeq2o>\n    </sectionq2o>\n    <sectionq2o title="Template string" n-scope="LrsLuV3bBnF">\n        Inside the template tag, you can use the value of a JS variable of the same component inside any HTML tag by enclosing the name of the variable by curly brackets.\n        <codeq2o n-scope="LrsLuV3bBnF">\n            &lt;template&gt;\n                Hi! my name is {name}. &lt;br&gt;\n                If you just want to just enclose some text within curly brackets, use \\(escape-sequence).\n                Example :\n                    \\{name} will just print {name} not Arun\n            &lt;/template&gt;\n            &lt;script&gt;\n                let name = "Arun";\n            &lt;/script&gt;\n        </codeq2o>\n    </sectionq2o>\n    <sectionq2o title="Calling events" n-scope="LrsLuV3bBnF">\n        In Nijor, instead of calling events like <highlightq2o n-scope="LrsLuV3bBnF">onclick</highlightq2o>, <highlightq2o n-scope="LrsLuV3bBnF">onload</highlightq2o>, etc we use events like <highlightq2o n-scope="LrsLuV3bBnF">on:click</highlightq2o>, <highlightq2o n-scope="LrsLuV3bBnF">on:load</highlightq2o>, etc.\n        <codeq2o n-scope="LrsLuV3bBnF">\n            &lt;template&gt;\n                &lt;input type="number" id="num"&gt;\n                &lt;button on:click="calc()"&gt;Click Me !&lt;/button&gt;\n                &lt;p id="res"&gt;&lt;/p&gt;\n            &lt;/template&gt;\n            &lt;script&gt;\n                function Factorial(n){\n                    if(n===1 || n===0) return 1;\n                    return n * Factorial(n-1);\n                }\n                function calc(){\n                    let num = document.getElementById("num").value;\n                    document.getElementById("res").innerHTML = `${num}! = ${Facrorial(num)}`;\n                }\n            &lt;/script&gt;\n        </codeq2o>\n    </sectionq2o>\n    <sectionq2o title="Importing a component" n-scope="LrsLuV3bBnF">\n        Let\'s assume that there is a component blogpost.nijor in the <highlightq2o n-scope="LrsLuV3bBnF">components/</highlightq2o> directory. We can import it any Nijor file by the following syntax.\n        <codeq2o file="pages/blog" n-scope="LrsLuV3bBnF">\n            &lt;template&gt;\n                &lt;blogpost title="Nijor : A first look"&gt;Nijor is a modern framework for building modern apps .....&lt;/blogpost&gt;\n            &lt;/template&gt;\n            &lt;script&gt;\n                import $BlogPost from \'components/blogpost.nijor\'; // Import the component\n            &lt;/script&gt;\n            &lt;script defer&gt;\n                $BlogPost.init(\'blogpost\'); // We have to initialize the component by the name which we\'re using to call it from inside the template tag.\n                $BlogPost.run(); // Calling this function will render the component.\n                /* \n                In our case, we are calling our component as &lt;blogpost&gt;....&lt;/blogpost&gt;. So we wrote $BlogPost.init(\'blogpost\');\n                Had we call it as &lt;post&gt;....&lt;/post&gt;, we\'d have writen $BlogPost.init(\'post\'); instead of $BlogPost.init(\'blogpost\');\n                */\n            &lt;/script&gt;\n        </codeq2o>\n        Importing a component seems to be a very tedious task, but luckly for developers, Nijor has a much more beautiful syntax in which you don\'t need to initilaize and run the component manually.\n        <codeq2o file="pages/blog" n-scope="LrsLuV3bBnF">\n            &lt;blogpost n:imported="components/blogpost"/&gt; &lt;!-- This syntax handles the init and run methods automatically --&gt;\n            &lt;template&gt;\n                &lt;blogpost title="Nijor : A first look"&gt;Nijor is a modern framework for building modern apps .....&lt;/blogpost&gt;\n            &lt;/template&gt;\n        </codeq2o>\n    </sectionq2o>\n    <sectionq2o title="Example :" n-scope="LrsLuV3bBnF">\n        <codeq2o lang="html" file="src/components/greet.nijor" n-scope="LrsLuV3bBnF">\n            &lt;template specs={name,_text_}&gt;\n                &lt;div&gt;\n                    &lt;h1&gt;Hello {name}&lt;/h1&gt;\n                    &lt;p&gt;{_text_}&lt;/p&gt;\n                &lt;/div&gt;\n            &lt;/template&gt;\n            &lt;style&gt;\n                div{\n                    padding : 0.5rem;\n                    background-color : white;\n                }\n                h1{\n                    color : #0099ff;\n                }\n            &lt;/style&gt;\n        </codeq2o>\n        <div style="display:none;" n-scope="LrsLuV3bBnF"><codeq2o n-scope="LrsLuV3bBnF"></codeq2o></div>\n\n        <codeq2o lang="html" file="src/App.nijor" n-scope="LrsLuV3bBnF">\n            &lt;greet n:imported="components/greet.nijor"/&gt;\n            &lt;!--&lt;greet n:imported="components/greet"/&gt; will also work as the file extension .nijor isn\'t mandatory while importing components. --&gt;\n            &lt;template&gt;\n                &lt;greet name="Tarun"&gt;How are you bro !&lt;/greet&gt;\n                &lt;greet name="Varun"&gt;Long time no see !&lt;/greet&gt;\n            &lt;/template&gt;\n        </codeq2o>\n    </sectionq2o>\n'}),(async function(){t.init("sectionq2o"),await t.run(),e.init("highlightq2o"),await e.run(),n.init("codeq2o"),await n.run()}));export{o as default};
