import{$ as e,a as o}from"./highlight-9f5512bf.js";import t from"./codeblock-5d174ceb.js";var n=new window.nijor.component((async function(){return'<sectionbo6gc title="Implementation of Dark-Mode" n-scope="R9GpjyJnSzkuU0uhr">\n        Dark-Mode is very popular these days. You can implement dark mode using <highlightbo6gc n-scope="R9GpjyJnSzkuU0uhr">CSS media queries</highlightbo6gc>. But, it has a little problem : dark mode will only get activated if your browser theme is set to dark. <br n-scope="R9GpjyJnSzkuU0uhr">\n        So, what if you want to use dark-mode without your browser\'s dark-mode activated ? or What if you want the user to have the freedom to toggle between dark, light and automatic(based on browser\'s theme) modes without them changing the theme of the browser ? <br n-scope="R9GpjyJnSzkuU0uhr">\n        You need to use Javascript for these use cases, and Nijor has got it covered !\n    </sectionbo6gc>\n    <sectionbo6gc title="How to implement Dark Mode ?" n-scope="R9GpjyJnSzkuU0uhr">\n        To implement dark-mode in your Nijor website :\n        <codebo6gc lang="js" file="App.js" n-scope="R9GpjyJnSzkuU0uhr">\n            import "nijor";\n            import "nijor/theme"; // Add this line of code to your App.js file\n        </codebo6gc>\n\n        <codebo6gc lang="html" file="index.html" n-scope="R9GpjyJnSzkuU0uhr">\n            &lt;script src="/assets/modules/app.js" type="module" onload="window.nijor.RenderTheme()" async defer&gt;&lt;/script&gt;\n            &lt;!-- \n            You need to onload="window.nijor.RenderTheme()"\n            so that dark mode automatically gets rendered if the browser color scheme is set to dark \n            --&gt;\n        </codebo6gc>\n\n        You can write separate CSS code for dark mode inside a Nijor Component by writing the CSS code for dark mode inside another <highlightbo6gc n-scope="R9GpjyJnSzkuU0uhr">style</highlightbo6gc> tag with the <highlightbo6gc n-scope="R9GpjyJnSzkuU0uhr">dark</highlightbo6gc> attribute.\n        <codebo6gc n-scope="R9GpjyJnSzkuU0uhr">\n            &lt;template&gt;\n                &lt;div&gt;\n                    &lt;p&gt;Hello !&lt;/p&gt;\n                &lt;/div&gt;\n            &lt;/template&gt;\n            &lt;style&gt;\n                div{\n                    background-color : white;\n                    padding : 0.5rem;\n                    color : black;\n                }\n            &lt;/style&gt;\n            &lt;style dark&gt;\n                div{\n                    background-color : rgb(31, 31, 31);\n                    color : rgb(0, 153, 255);\n                }\n            &lt;/style&gt;\n        </codebo6gc>\n    </sectionbo6gc>\n    <sectionbo6gc title="Methods provided by nijor/theme" n-scope="R9GpjyJnSzkuU0uhr">\n        <highlightbo6gc n-scope="R9GpjyJnSzkuU0uhr">window.nijor.getTheme()</highlightbo6gc> : This method returns the value of current theme (light, dark, auto) of website. <br n-scope="R9GpjyJnSzkuU0uhr">\n        <highlightbo6gc n-scope="R9GpjyJnSzkuU0uhr">window.nijor.getColorScheme()</highlightbo6gc> : This method returns the value of current theme (light, dark, auto) of browser. <br n-scope="R9GpjyJnSzkuU0uhr">\n        <highlightbo6gc n-scope="R9GpjyJnSzkuU0uhr">window.nijor.setTheme(theme)</highlightbo6gc> : This method changes the theme of the website according to the value of parameter theme. Accepted values are "dark", "light", "auto"(browser\'s theme).\n    </sectionbo6gc>\n'}),(async function(){e.init("sectionbo6gc"),await e.run(),o.init("highlightbo6gc"),await o.run(),t.init("codebo6gc"),await t.run()}));export{n as default};
