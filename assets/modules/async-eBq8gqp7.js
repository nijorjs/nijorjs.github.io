import{highlight_default as t,section_default as n}from"./highlight-DdKYwJAm.js";var e=new window.nijor.component((async function(){return'<section_ent3yf title="Async Loading of data" n-scope="ent3yf"> We can load data from server ascychronously using the following syntax. <pre n-scope="ent3yf"><code n-scope="ent3yf">\n        &lt;body&gt;\n            &lt;div n:async&gt;\n                &lt;n:data fetch="data:func()"&gt; &lt;!-- \'data\' is the variable that is retured from the async function \'func\'--&gt;\n                    &lt;!--This section gets rendered when the data is loaded--&gt;\n                &lt;/n:data&gt;\n                &lt;n:loading&gt;\n                    &lt;!--This section gets rendered when the data is being loaded--&gt;\n                &lt;/n:loading&gt;\n                &lt;n:error catch="error"&gt; &lt;!--You can use the value of catch attribute as a variable inside the n:error block--&gt;\n                    &lt;!--This section gets rendered if there is an error in the \'func\' function--&gt;\n                &lt;/n:error&gt;\n            &lt;/div&gt;\n        &lt;/body&gt;\n\n        &lt;script&gt;\n        async function func() {\n            // .....\n            // This function should always be an async function\n        }\n        &lt;/script&gt;\n        </code></pre> </section_ent3yf><section_ent3yf title="Example" n-scope="ent3yf"> <pre n-scope="ent3yf"><code n-scope="ent3yf">\n        &lt;body&gt;\n            &lt;div n:async&gt;\n                &lt;n:data fetch="planet:getPlanet()"&gt;\n                    &lt;p&gt;{planet}&lt;/p&gt;\n                &lt;/n:data&gt;\n                &lt;n:loading&gt;\n                    &lt;p&gt;Loading...&lt;/p&gt;\n                &lt;/n:loading&gt;\n                &lt;n:error catch="error"&gt;\n                    &lt;p&gt;{error}&lt;/p&gt;\n                &lt;/n:error&gt;\n            &lt;/div&gt;\n        &lt;/body&gt;\n\n        &lt;script&gt;\n        async function getPlanet() {\n            const id = Math.floor(Math.random() * 60) + 1;\n            const response = await fetch(`https://swapi.tech/tech/planets/${id}`);\n            const data = await response.json();\n            return data.name;\n        }\n        &lt;/script&gt;\n        </code></pre> </section_ent3yf><section_ent3yf title="n:reload" n-scope="ent3yf"> To reload the async-loader, we can use <highlight_ent3yf n-scope="ent3yf">n:reload</highlight_ent3yf> attribute in the same tag with <highlight_ent3yf n-scope="ent3yf">n:for</highlight_ent3yf> and give it a unique value. Unique value is important as the loop can be reloaded from any file/component.<br n-scope="ent3yf"> The reload function is used to reload those lists/async-loader(s) whose n:reload value matches the value passed inside the function.<br n-scope="ent3yf"> <pre n-scope="ent3yf"><code n-scope="ent3yf">\n        &lt;body&gt;\n            &lt;div n:async&gt;\n                &lt;n:data fetch="planet:getPlanet()" n:reload="randomPlanet"&gt;\n                    &lt;p&gt;{planet}&lt;/p&gt;\n                &lt;/n:data&gt;\n                &lt;n:loading&gt;\n                    &lt;p&gt;Loading...&lt;/p&gt;\n                &lt;/n:loading&gt;\n                &lt;n:error catch="error"&gt;\n                    &lt;p&gt;{error}&lt;/p&gt;\n                &lt;/n:error&gt;\n            &lt;/div&gt;\n            &lt;button on:click="click()"&gt;Explore the next planet&lt;/button&gt;\n        &lt;/body&gt;\n\n        &lt;script&gt;\n\n        import {reload} from "nijor";\n\n\t    function click(){\n            reload(\'randomPlanet\'); // Reload the list/async-loader with n:reload="randomPlanet"\n        }\n\n        async function getPlanet() {\n            const id = Math.floor(Math.random() * 60) + 1;\n            const response = await fetch(`https://swapi.tech/tech/planets/${id}`);\n            const data = await response.json();\n            return data.name;\n        }\n        &lt;/script&gt;\n        </code></pre> </section_ent3yf>'}),(async function(){t.init("highlight_ent3yf"),await t.run(),t.init("highlight_ent3yf"),await t.run(),n.init("section_ent3yf"),await n.run(),n.init("section_ent3yf"),await n.run(),n.init("section_ent3yf"),await n.run(),hljs.highlightAll()}));export{e as default};