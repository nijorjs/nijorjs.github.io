<section n:imported="components/docs/section"/>
<highlight n:imported="components/docs/highlight"/>
<code n:imported="components/docs/codeblock"/>
<template>
    <div style="display:none;"><code></code></div>
    <section title="Code Splitting">
        The Nijor compiler automatically compiles and packages all <highlight>*.nijor page</highlight> files into multiple Javascript files. But compiles the <highlight>*.nijor component</highlight> files with the <highlight>*.nijor page</highlight> itself.
        Although this is not an issue for most projects, it can cause problems with increased loading time, resulting in a bad user experience.
        To overcome this problem, Nijor includes a built-in feature called code-splitting.
        By code-splitting your application, you can selectively <highlight>lazy-load</highlight> only the components that are currently required by the user, which can greatly enhance your app's performance.
        This approach does not reduce the overall amount of code in your app, but it does prevent loading of unnecessary code and reduces the amount of code needed during the initial load. All the pages in your app are lazy-loaded and there's no way to change it !
    </section>
    <section title="Lazy-loading a component">
        To lazy-load a component, just add the <highlight>lazy</highlight> attribute after it.
        <code>
            &lt;card1 n:imported="components/card.nijor"/&gt; &lt;!--Without Lazy Loading--&gt;
            &lt;card2 n:imported="components/card.nijor" lazy/&gt; &lt;!--With Lazy Loading--&gt;
        </code>
    </section>
</template>